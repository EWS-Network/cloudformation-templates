---
AWSTemplateFormatVersion: "2010-09-09"

Description: >-
  Creates the Lambda function for VPC network subnets

################################################################################
#
# Resources
#

Resources:

  ##############################################################################
  #
  # GET all the Subnets CIDR
  #

  iamRoleLambdaGetSubnetsCidr:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action:
              - 'sts:AssumeRole'
      Policies: []
      RoleName: !Sub 'lambdaEC2Describe${AWS::StackName}'

  iamPolicyGetSubnetsCidr:
    Type: AWS::IAM::Policy
    DependsOn:
      - iamRoleLambdaGetSubnetsCidr
    Properties:
      Roles:
        - !Sub 'lambdaEC2Describe${AWS::StackName}'
      PolicyName: !Sub 'allowEc2Describes${AWS::StackName}'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: Stmt1474380040000
          Effect: Allow
          Action:
            - "ec2:DescribeRegions"
            - "ec2:DescribeAvailabilityZones"
          Resource:
            - "*"

  lambdaFunctionGetSubnetsCidr:
    DependsOn:
      - iamPolicyGetSubnetsCidr
      - iamRoleLambdaGetSubnetsCidr
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: ews-lambda-functions
        S3Key: network/vpc/getSubnetsCidr.zip
      Description: >-
        Function to get the Subnets CIDRs
      FunctionName: 'getSubnetsCidr'
      Handler: subnets_maths_v1.lambda_handler
      MemorySize: 128
      Role: !GetAtt [ iamRoleLambdaGetSubnetsCidr, 'Arn' ]
      Runtime: python2.7
      Timeout: 5


  ##############################################################################
  #
  # Get VPC Id
  #

  iamRoleLambdaGetVpcId:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action:
              - 'sts:AssumeRole'
      Policies: []
      RoleName: !Sub 'lambdaGetVpcId${AWS::StackName}'

  iamPolicyGetVpcId:
    Type: AWS::IAM::Policy
    DependsOn:
      - iamRoleLambdaGetVpcId
    Properties:
      Roles:
        - !Sub 'lambdaGetVpcId${AWS::StackName}'
      PolicyName: !Sub 'allowEc2Describes${AWS::StackName}'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: Stmt1474380040000
          Effect: Allow
          Action:
            - "ec2:DescribeRegions"
            - "ec2:DescribeAvailabilityZones"
            - "ec2:DescribeVpcs"
          Resource:
            - "*"

  lambdaFunctionGetVpcId:
    DependsOn:
      - iamPolicyGetVpcId
      - iamRoleLambdaGetVpcId
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: ews-lambda-functions
        S3Key: network/vpc/getVpcId.zip
      Description: >-
        Function to get the VPC ID out of TAG
      FunctionName: 'getVpcId'
      Handler: getVpcId.lambda_handler
      MemorySize: 128
      Role: !GetAtt [ iamRoleLambdaGetVpcId, 'Arn' ]
      Runtime: python2.7
      Timeout: 5


  ##############################################################################
  #
  # Get VPC Subnets by Layers
  #

  iamRoleLambdaGetSubnetsLayers:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: "lambda.amazonaws.com"
            Action:
              - 'sts:AssumeRole'
      Policies: []
      RoleName: !Sub 'lambdaGetSubnetsLayers${AWS::StackName}'

  iamPolicyGetSubnetsLayers:
    Type: AWS::IAM::Policy
    DependsOn:
      - iamRoleLambdaGetSubnetsLayers
    Properties:
      Roles:
        - !Sub 'lambdaGetSubnetsLayers${AWS::StackName}'
      PolicyName: !Sub 'allowEc2Describes${AWS::StackName}'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: Stmt1474380040000
          Effect: Allow
          Action:
            - "ec2:DescribeRegions"
            - "ec2:DescribeAvailabilityZones"
            - "ec2:DescribeVpcs"
            - "ec2:DescribeSubnets"
          Resource:
            - "*"

  lambdaFunctionGetSubnetsLayers:
    DependsOn:
      - iamPolicyGetSubnetsLayers
      - iamRoleLambdaGetSubnetsLayers
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: ews-lambda-functions
        S3Key: network/vpc/getSubnetsLayers.zip
      Description: >-
        Function to get the Subnets IDs based on TAGs
      FunctionName: 'getSubnetsLayers'
      Handler: getSubnetsLayers.lambda_handler
      MemorySize: 128
      Role: !GetAtt [ iamRoleLambdaGetSubnetsLayers, 'Arn' ]
      Runtime: python2.7
      Timeout: 5


################################################################################
#
# Ouputs
#

